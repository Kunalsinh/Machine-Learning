#############################  QUESTION 1 ########################
import cv2

# Load the image
image_path = '1.jpg'
image = cv2.imread(image_path)

# Convert the image to grayscale (required for detection)
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)


# Load the pre-trained Haar Cascade classifiers for face and eyes
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# Detect faces in the image
faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))


for (x, y, w, h) in faces:
    # Draw a rectangle around the face
    cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)
    
    # Get the region of interest (ROI) in the grayscale image for eyes
    roi_gray = gray_image[y:y + h, x:x + w]
    roi_color = image[y:y + h, x:x + w]
     # Detect eyes within the ROI
    eyes = eye_cascade.detectMultiScale(roi_gray)
    
    for (ex, ey, ew, eh) in eyes:
        # Draw a rectangle around each detected eye
        cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)

cv2.imshow('Eye Detection', image)
cv2.waitKey(0)
cv2.destroyAllWindows()

##################### Question 3 ##########################

import pandas as pd
from sklearn.cluster import KMeans

data=pd.read_csv("3.csv")
print(type(data))
data=data.iloc[:,1:]
kmeans_obj=KMeans(init='k-means++',n_clusters=3)
kmeans_obj.fit_predict(data)